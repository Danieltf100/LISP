(defun jn (L N)
	(cond
		((equal L 'nil) 'nil)
		((equal	(car L) (car N)) 't)
		('t (jn (cdr L) N))
	)
)

(defun incluir (A V)
	(cond
		((equal A 'nil) (reverse (cons V A)))
		((equal (car (car A)) (car V))
				(cond 	((jn (cdr(car A)) (cdr V)) A)
						('t (cons (concatenate 'cons (car A) (cdr V)) (cdr A)))
				)
		)
		('t (incAux (cdr A) A V))
	)
)
(defun IncAux (A B V)
	(cond
		((equal A 'nil) (reverse (cons V B)))
		((equal (car (car A)) (car V))
				(cond 	((jn (cdr(car A)) (cdr V)) B)
						('t (append (peatr A B) (cons (concatenate 'cons (car A) (cdr V)) (cdr A))))
				)
		)
		('t (incAux (cdr A) B V))
	)
)
(defun peatr (A B)
	(cond
		((equal (caar(last B)) (caar A)) (butlast B))
		('t (peatr A (butlast B)))
	)
)
;-----------------------------------------------------------L = lista, B = nome e N = numero
(defun excluir (L B N)
        (cond
                ((atom L) L)
                ((equal (caar L) B)
					(cond
						((equal (cdr (excAux N (car L))) 'nil) (cdr L))
						('t (cons (excAux N (car L)) (cdr L)))
					)
				)
                ('t (cons (car L) (excluir (cdr L) B N)))
        )
)
(defun excAux (A L)
	(cond
		((atom L) L)
		((equal A (car L)) (excAux A (cdr L)))
		('T (cons (car L) (excAux A (cdr L))))
	)
)
;-----------------------------------------------------------
(defun telefones (A N)
	(cond
		((equal A 'nil) 'INEXISTENTE)
		((equal (caar A) N) (car A))
		('t (telefones (cdr A) N))
	)
)
